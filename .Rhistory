myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
rm(list=ls())
setwd("~/github/aln2snps.qin")
list.files('0613/')
tb1 = read.csv("0613/merged_meta0613_dewpoint.csv", stringsAsFactors = FALSE,row.names=1)
tb1 = tb1[, c('gisaid_epi_isl', 'Dew2meter')]
head(tb1)
list.files('../key.data/')
tb2 = read.csv('../key.data/metadata0613_with_MSA.csv',stringsAsFactors = FALSE, row.names = 1 )
tb = merge(tb1, tb2, by=c('gisaid_epi_isl'))
tb = tb[ tb$host=='Human', ]
table(tb$host)
names(tb)[1:50]
#mutations  = tb[, 25:4108]
mutations_begin = 28
mutations_end = length(names(tb))
#names(tb)
#names(tb)[mutations_begin: mutations_end]
#change 'N' to NA
#for ( mycol in 30:35){
#  for ( myrow in 1:length(tb[1,]) ) {
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='N', NA,  tb[myrow, mycol] )
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='W', NA,  tb[myrow, mycol] )
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='K', NA,  tb[myrow, mycol] )
#  }
#}
which (names(tb) == "Dew2meter")
get_most_frequent_SNV = function ( in_bases, ref_base ){
sorted_bases = rev( in_bases)
if ( sorted_bases[1] != ref_base ) {
return (sorted_bases[1])
} else if ( sorted_bases[2] != ref_base  ) {
return ( sorted_bases[2])
}
}
in_bases = c("A", "G", "C", "T", "-")
get_most_frequent_SNV(in_bases , "G")
get_most_frequent_SNV(in_bases , "-")
get_most_frequent_SNV(in_bases , "T")
get_most_frequent_SNV(in_bases , "C")
pvalues = c()
ratio.ref.vs.SNV =  c()  #>1 is positive, <1 is negative
ref_nts  =  c()
SNV_nts  =  c()
debug = 0
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
hist(pvalues)
names(pvalues) = names(tb)[mutations_begin:mutations_end]
results = data.frame(cbind(names(pvalues), pvalues, ratio.ref.vs.SNV, ref_nts, SNV_nts))
results$msa_position = as.numeric(gsub("X", "", results[,1]))
head(results)
head(sort(pvalues))
tail(sort(pvalues))
#EBiocManager::install("qvalue")
library(qvalue)
qobj <- qvalue(pvalues)
#qobj <- qvalue(pvalues, fdr.level = 0.05)
qvalues <- qobj$qvalues
results$q = qvalues
#names(results) = c("R_position", "p", "q", "msa_position")
#results = results[, c("R_position", "msa_position", "p", "q")]
summary(results)
write.csv2(results, "0613/gwas-dewpoint-meta0613-positions-pq-v2.csv", row.names = FALSE, quote=F)
#old code for gisaid 0508 version
#boxplot( tb$T2meter ~ tb[, c('X30241')])
#table(tb$X30241)
#mutT = tb$T2meter[tb$'X30241'=="A"]
#refT = tb$T2meter[tb$'X30241'=="G"]
#summary(tb[, c("T2meter", "X30241")])
#t.test( mutT, refT)
View(results)
pvalues = c()
ratio.ref.vs.SNV =  c()  #>1 is positive, <1 is negative
ref_nts  =  c()
SNV_nts  =  c()
ref_nt_freq = c()
SNV_nt_fre = c()
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
tmp
i = 2500
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
pvalues = c()
ratio.ref.vs.SNV =  c()  #>1 is positive, <1 is negative
ref_nts  =  c()
SNV_nts  =  c()
ref_nt_freq = c()
SNV_nt_freq = c()
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
debug = 1
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
debug = 1
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
rm(list=ls())
setwd("~/github/aln2snps.qin")
list.files('0613/')
tb1 = read.csv("0613/merged_meta0613_dewpoint.csv", stringsAsFactors = FALSE,row.names=1)
tb1 = tb1[, c('gisaid_epi_isl', 'Dew2meter')]
head(tb1)
list.files('../key.data/')
tb2 = read.csv('../key.data/metadata0613_with_MSA.csv',stringsAsFactors = FALSE, row.names = 1 )
tb = merge(tb1, tb2, by=c('gisaid_epi_isl'))
tb = tb[ tb$host=='Human', ]
table(tb$host)
names(tb)[1:50]
#mutations  = tb[, 25:4108]
mutations_begin = 28
mutations_end = length(names(tb))
#names(tb)
#names(tb)[mutations_begin: mutations_end]
#change 'N' to NA
#for ( mycol in 30:35){
#  for ( myrow in 1:length(tb[1,]) ) {
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='N', NA,  tb[myrow, mycol] )
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='W', NA,  tb[myrow, mycol] )
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='K', NA,  tb[myrow, mycol] )
#  }
#}
which (names(tb) == "Dew2meter")
get_most_frequent_SNV = function ( in_bases, ref_base ){
sorted_bases = rev( in_bases)
if ( sorted_bases[1] != ref_base ) {
return (sorted_bases[1])
} else if ( sorted_bases[2] != ref_base  ) {
return ( sorted_bases[2])
}
}
in_bases = c("A", "G", "C", "T", "-")
get_most_frequent_SNV(in_bases , "G")
get_most_frequent_SNV(in_bases , "-")
get_most_frequent_SNV(in_bases , "T")
get_most_frequent_SNV(in_bases , "C")
pvalues = c()
ratio.ref.vs.SNV =  c()  #>1 is positive, <1 is negative
ref_nts  =  c()
SNV_nts  =  c()
ref_nt_freq = c()
SNV_nt_freq = c()
debug = 1
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
hist(pvalues)
names(pvalues) = names(tb)[mutations_begin:mutations_end]
results = data.frame(cbind(names(pvalues), pvalues, ratio.ref.vs.SNV, ref_nts, SNV_nts, ref_nt_freq, SNV_nt_freq))
results$msa_position = as.numeric(gsub("X", "", results[,1]))
head(results)
head(sort(pvalues))
tail(sort(pvalues))
#EBiocManager::install("qvalue")
library(qvalue)
qobj <- qvalue(pvalues)
pvalues
View(results)
rm(list=ls())
setwd("~/github/aln2snps.qin")
list.files('0613/')
tb1 = read.csv("0613/merged_meta0613_dewpoint.csv", stringsAsFactors = FALSE,row.names=1)
tb1 = tb1[, c('gisaid_epi_isl', 'Dew2meter')]
head(tb1)
list.files('../key.data/')
tb2 = read.csv('../key.data/metadata0613_with_MSA.csv',stringsAsFactors = FALSE, row.names = 1 )
tb = merge(tb1, tb2, by=c('gisaid_epi_isl'))
tb = tb[ tb$host=='Human', ]
table(tb$host)
names(tb)[1:50]
#mutations  = tb[, 25:4108]
mutations_begin = 28
mutations_end = length(names(tb))
#names(tb)
#names(tb)[mutations_begin: mutations_end]
#change 'N' to NA
#for ( mycol in 30:35){
#  for ( myrow in 1:length(tb[1,]) ) {
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='N', NA,  tb[myrow, mycol] )
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='W', NA,  tb[myrow, mycol] )
#    tb[ myrow, mycol ] = ifelse( tb[myrow, mycol]=='K', NA,  tb[myrow, mycol] )
#  }
#}
which (names(tb) == "Dew2meter")
get_most_frequent_SNV = function ( in_bases, ref_base ){
sorted_bases = rev( in_bases)
if ( sorted_bases[1] != ref_base ) {
return (sorted_bases[1])
} else if ( sorted_bases[2] != ref_base  ) {
return ( sorted_bases[2])
}
}
in_bases = c("A", "G", "C", "T", "-")
get_most_frequent_SNV(in_bases , "G")
get_most_frequent_SNV(in_bases , "-")
get_most_frequent_SNV(in_bases , "T")
get_most_frequent_SNV(in_bases , "C")
pvalues = c()
ratio.ref.vs.SNV =  c()  #>1 is positive, <1 is negative
ref_nts  =  c()
SNV_nts  =  c()
ref_nt_freq = c()
SNV_nt_freq = c()
debug = 0
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
print(i)
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
hist(pvalues)
names(pvalues) = names(tb)[mutations_begin:mutations_end]
results = data.frame(cbind(names(pvalues), pvalues, ratio.ref.vs.SNV, ref_nts, SNV_nts, ref_nt_freq, SNV_nt_freq))
results$msa_position = as.numeric(gsub("X", "", results[,1]))
head(results)
head(sort(pvalues))
tail(sort(pvalues))
#EBiocManager::install("qvalue")
library(qvalue)
qobj <- qvalue(pvalues)
#qobj <- qvalue(pvalues, fdr.level = 0.05)
qvalues <- qobj$qvalues
results$q = qvalues
#names(results) = c("R_position", "p", "q", "msa_position")
#results = results[, c("R_position", "msa_position", "p", "q")]
summary(results)
write.csv2(results, "0613/gwas-dewpoint-meta0613-positions-pq-v2.csv", row.names = FALSE, quote=F)
#old code for gisaid 0508 version
#boxplot( tb$T2meter ~ tb[, c('X30241')])
#table(tb$X30241)
#mutT = tb$T2meter[tb$'X30241'=="A"]
#refT = tb$T2meter[tb$'X30241'=="G"]
#summary(tb[, c("T2meter", "X30241")])
#t.test( mutT, refT)
View(results)
debug = 0.5
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
if (debug >0) { print(i) }
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
debug = 0
if (debug > 0){
mutations_begin = 3004
mutations_end = mutations_begin + 10
}
for (i in mutations_begin:mutations_end) {
#   i = 2500
if (debug >0) { print(i) }
ref_nt = tb[1, i]
sub = tb[, c(2,i )]
tmp= table( as.factor(tb[, i]), useNA='no')
tmp2 = sort(tmp[c('A', "T", "C", "G", "-")]) #remove ambiguous nucleotides
ref_nt_freq = c( ref_nt_freq, tmp[ref_nt])
if (length(tmp2) > 1) {
# there are enough SNVs
SNV_nt = get_most_frequent_SNV(names(tmp2) , ref_nt) #major bug fix
ref_nts = c( ref_nts, ref_nt )
SNV_nts = c( SNV_nts, SNV_nt )
SNV_nt_freq = c( SNV_nt_freq, tmp[SNV_nt])
ref_sub = sub[ sub[,2]== ref_nt, 1:2  ]
SNV_sub = sub[ sub[,2]== SNV_nt, 1:2  ]
ref_sub = ref_sub[ !is.na(ref_sub[,1]), 1:2]
SNV_sub = SNV_sub[ !is.na(SNV_sub[,1]), 1:2]
if (length(SNV_sub[,1]) > 2) {
myT = t.test( ref_sub[,1], SNV_sub[,1])
pvalues = c(pvalues, myT$p.value)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, mean(ref_sub[,1], na.rm = T) / mean(SNV_sub[,1], na.rm = T))
} else {
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
} else {
#only reference are left
pvalues = c(pvalues, NA)
ratio.ref.vs.SNV = c( ratio.ref.vs.SNV, NA)
}
}
